<?xml version="1.0" encoding="UTF-8" ?>
<dataConfig>
    <script><![CDATA[

                var EVENE_DOMAIN = "http://www.evene.fr/";

               function encodeUrl(encoded_url) {
                    var url = getRealUrl(encoded_url);
                    url = strrev(url);
                    return url;
               }

               function evene_site_mask_url(url) {
                    var maskInput = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890:.-/?&%+_=#(),@[]{};^~$';
                    var maskOutput = 'op8#0qr:stxyEFYZ.-/?7zaR)ST9UV_WXbcdeuvwfghijkl&456mnG+HIJKL%123=MNOPQA(BCD,@[]{};^~$';

                    // First reverse the string.
                    var reverse_url = strrev(url);
                    return '#' + strtr(reverse_url, maskInput, maskOutput);
               }

               function strtr(str, from, to) {
                    // "strtr" adaptÃ© depuis : http://kevin.vanzonneveld.net
                    var fr = '',
                        i = 0,
                        j = 0,
                        lenStr = 0,
                        lenFrom = 0,
                        tmpStrictForIn = false,
                        fromTypeStr = '',
                        toTypeStr = '',
                        istr = '';
                    var tmpFrom = [];
                    var tmpTo = [];
                    var ret = '';
                    var match = false;

                    // Received replace_pairs?
                    // Convert to normal from->to chars
                    if (typeof from === 'object') {
                        tmpStrictForIn = this.ini_set('phpjs.strictForIn', false); // Not thread-safe; temporarily set to true
                        from = this.krsort(from);
                        this.ini_set('phpjs.strictForIn', tmpStrictForIn);

                        for (fr in from) {
                            if (from.hasOwnProperty(fr)) {
                                tmpFrom.push(fr);
                                tmpTo.push(from[fr]);
                            }
                        }

                        from = tmpFrom;
                        to = tmpTo;
                    }

                    // Walk through subject and replace chars when needed
                    lenStr = str.length;
                    lenFrom = from.length;
                    fromTypeStr = typeof from === 'string';
                    toTypeStr = typeof to === 'string';

                    for (i = 0; i < lenStr; i++) {
                        match = false;
                        if (fromTypeStr) {
                            istr = str.charAt(i);
                            for (j = 0; j < lenFrom; j++) {
                                if (istr == from.charAt(j)) {
                                    match = true;
                                    break;
                                }
                            }
                        } else {
                            for (j = 0; j < lenFrom; j++) {
                                if (str.substr(i, from[j].length) == from[j]) {
                                    match = true;
                                    // Fast forward
                                    i = (i + from[j].length) - 1;
                                    break;
                                }
                            }
                        }
                        if (match) {
                            ret += toTypeStr ? to.charAt(j) : to[j];
                        } else {
                            ret += str.charAt(i);
                        }
                    }

                    return ret;
               }

               function strrev(str) {
                    return str.split('').reverse().join('');
               }

               function first(obj) {
                    return obj[Object.keys(obj)[0]];
                }

                function article1(row) {
                    if(row.get('field_article_image') !== null)
                    {
                        var field_article_image = JSON.parse(row.get('field_article_image'))

                        if(field_article_image !== null) {
                            for(var i in field_article_image) {

                                if(field_article_image[i] !== null)
                                {
                                    if(field_article_image[i].filename)
                                    {
                                        row.put('picture',field_article_image[i].filename);
                                    }
                                }
                            }
                        }
                    }

                    if(row.get('field_article_text') !== null)
                    {
                        var field_article_text = JSON.parse(row.get('field_article_text'))

                            for(var i in field_article_text) {

                                if(field_article_text[i] !== null)
                                {
                                    if(field_article_text[i].value !== null)
                                    {
                                        row.put('body',field_article_text[i].value);
                                    }
                                }
                            }
                    }

                    if(row.get('field_subtitle') !== null)
                    {
                        var field_subtitle = JSON.parse(row.get('field_subtitle'))

                        for(var i in field_subtitle) {
                            if(field_subtitle[i] !== null)
                            {
                                if(field_subtitle[i].value !== null)
                                {
                                    row.put('field_subtitle_final',field_subtitle[i].value);
                                }
                            }
                        }
                    }

                    if(row.get('taxonomy') !== null)
                    {
                        var taxo = JSON.parse(row.get('taxonomy'))

                        for(var i in taxo) {
                            if(taxo[i] !== null)
                            {
                                if(taxo[i].name !== null  && taxo[i].vid !== null)
                                {
                                    if(taxo[i].vid == 2)
                                    {
                                        row.put('taxonomy_names',taxo[i].name);
                                    }
                                }
                            }
                        }
                    }

                    return row;
                }

                function book1(row)
                {





                    if(row.get('field_fnac_url') !== null)
                    {
                        var fnac = JSON.parse(row.get('field_fnac_url'))

                        for(var i in fnac)
                        {
                            if(fnac[i] !== null)
                            {
                                if(fnac[i].url !== null)
                                {
                                    //row.put('fnac_url',evene_site_mask_url(fnac[i].url));
                                }
                            }
                        }
                    }

                    if(row.get('field_publication_date') !== null)
                    {
                        var field_publication_date = JSON.parse(row.get('field_publication_date'))
                        for(var i in field_publication_date)
                        {
                            if(field_publication_date[i] !== null)
                            {
                                if(field_publication_date[i].value !== null)
                                {
                                    row.put('ds_book_publication_timestamp',new java.util.Date(field_publication_date[i].value * 1000));
                                }
                            }
                        }
                    }

                    if(row.get('field_content_celebrity') !== null)
                    {
                        var field_content_celebrity = JSON.parse(row.get('field_content_celebrity'))
                        for(var i in field_content_celebrity)
                        {
                            if(field_content_celebrity[i] !== null)
                            {
                                if(field_content_celebrity[i].nid !== null && field_content_celebrity[i].type !== null)
                                {
                                    if(field_content_celebrity[i].type == 50)
                                    {
                                        row.put('field_content_celebrity_nid',field_content_celebrity[i].nid);
                                    }
                                }
                            }
                        }
                    }


                    if(row.get('field_description') !== null)
                    {
                        if(row.get('field_description').get(0) !== null)
                        {
                            if(row.get('field_description').get(0).get('value') !== null)
                            {
                                row.put('body',row.get('field_description').get(0).get('value'));

                            }
                        }

                    }




                    if(row.get('field_subtitle') !== null)
                    {
                        if(row.get('field_subtitle').get(0) !== null)
                        {
                            if(row.get('field_subtitle').get(0).get('value') !== null)
                            {
                                row.put('field_subtitle_final',row.get('field_subtitle').get(0).get('value'));
                            }
                        }

                    }




                    if(row.get('field_image') !== null)
                    {
                        if(row.get('field_image').get(0) !== null)
                        {
                            if(row.get('field_image').get(0).get('filepath') !== null)
                            {
                                row.put('picture',row.get('field_image').get(0).get('filename'));
                            }
                        }

                    }
                    if(row.get('field_label') !== null)
                    {
                        if(row.get('field_label').get(0) !== null)
                        {
                            if(row.get('field_label').get(0).get('nid') !== null)
                            {
                                row.put('field_label_nid',row.get('field_label').get(0).get('nid'));
                            }
                        }

                    }
                 return row;
                }

                function celebrity1(row)        {

                    if(row.get('field_description') !== null)
                    {
                        if(row.get('field_description').get(0) !== null)
                        {
                            if(row.get('field_description').get(0).get('value') !== null)
                            {
                                row.put('ss_field_place_description',row.get('field_description').get(0).get('value'));
                            }
                            else
                            {
                                row.put('ss_field_place_description','');
                            }
                        }

                    }
                    else
                    {
                        row.put('ss_field_place_description','');
                    }

                    if(row.get('field_info') !== null)
                    {
                        if(row.get('field_info').get(0) !== null)
                        {
                            if(row.get('field_info').get(0).get('value') !== null)
                            {
                                row.put('ss_celebrity_info',row.get('field_info').get(0).get('value'));
                            }
                            else
                            {
                                row.put('ss_celebrity_info','');
                            }
                        }

                    }
                    else
                    {
                        row.put('ss_celebrity_info','');
                    }

                    if(row.get('field_intro') !== null)
                    {
                        if(row.get('field_intro').get(0) !== null)
                        {
                            if(row.get('field_intro').get(0).get('value') !== null)
                            {
                                row.put('ss_field_place_intro',row.get('field_intro').get(0).get('value'));
                            }
                            else
                            {
                                row.put('ss_field_place_intro','');
                            }
                        }

                    }
                    else
                    {
                        row.put('ss_field_place_intro','');
                    }



                    if(row.get('field_site') !== null)
                    {
                        if(row.get('field_site').get(0) !== null)
                        {
                            if(row.get('field_site').get(0).get('url') !== null)
                            {
                                row.put('ss_field_place_site',row.get('field_site').get(0).get('url'));
                            }
                            else
                            {
                                row.put('ss_field_place_site','');
                            }
                        }

                    }
                    else
                    {
                        row.put('ss_field_place_site','');
                    }

                    row.put('body',row.get('ss_field_place_intro') + ' ' + row.get('ss_field_place_description') + ' ' + row.get('ss_field_place_site'));




                    if(row.get('field_image') !== null)
                    {
                        if(row.get('field_image').get(0) !== null)
                        {
                            if(row.get('field_image').get(0).get('filepath') !== null)
                            {
                                row.put('picture',row.get('field_image').get(0).get('filename'));
                            }
                        }

                    }
                    if(row.get('field_label') !== null)
                    {
                        if(row.get('field_label').get(0) !== null)
                        {
                            if(row.get('field_label').get(0).get('nid') !== null)
                            {
                                row.put('field_label_nid',row.get('field_label').get(0).get('nid'));
                            }
                        }

                    }
                 return row;
                }

                function book2(row)
                {
                    if(row.get('title') !== null)
                    {
                        row.put('ss_book_label',row.get('title'));
                    }
                    return row;
                }

                function book3(row)
                {


                    if(row.get('title') !== null)
                    {
                        row.put('book_author_content_celebrity',row.get('title'));

                    }
                    if(row.get('path') !== null)
                    {
                        row.put('book_author_content_celebrity_path',row.get('path'));
                    }
                    return row;

                }
                function general(row)
                {

                    if(row.get('path') !== null)
                    {
                        //row.put('path_mask',evene_site_mask_url(EVENE_DOMAIN + row.get('path')));
                    }

                    if(row.get('taxonomy') !== null)
                    {
                        var taxo = JSON.parse(row.get('taxonomy'))

                        for(var i in taxo) {
                            if(taxo[i] !== null)
                            {
                                if(taxo[i].name !== null  && taxo[i].vid !== null)
                                {
                                    if(taxo[i].vid == 2)
                                    {
                                        row.put('taxonomy_names',taxo[i].name);
                                    }
                                }
                            }
                        }
                    }
                     return row;
                }

                function taxoPath(row)
                {
                    if(row.get('path') !== null)
                    {
                        row.put('taxonomy_path',row.get('path'));
                    }
                    return row;
                }


        ]]></script>
<dataSource name="EveneMongo" type="MongoDataSource" database="evene"  port="37017" host="127.0.0.1"/>
 <document name="node">
  <entity name="livre" processor="MongoEntityProcessor"
   query="{'status':1, 'type':'book'}"
   collection="node"
   datasource="EveneMongo"
   transformer="script:general,script:book1,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" stripHTML="true" />
      <entity name="livre_label"
              processor="MongoEntityProcessor"
              onError="continue"
              query="{'nid': ${livre.field_label_nid} }"

              collection="node"
              datasource="EveneMongo"
              transformer="script:book2">
          <field column="body" name="body" stripHTML="true" />

      </entity>
      <entity name="livre_auteur"
              processor="MongoEntityProcessor"
              onError="continue"
              query="{'nid': ${livre.field_content_celebrity_nid} }"
              collection="node"
              datasource="EveneMongo"
              transformer="script:book3">

      </entity>
      <entity name="livre_categorie"
              processor="MongoEntityProcessor"
              onError="continue"
              query="{'type': 'listing', 'title':'${livre.taxonomy_names}'}.limit(1)"
              collection="node"
              datasource="EveneMongo"
              transformer="script:taxoPath">

      </entity>
  </entity>
  <entity name="celebrite" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'celebrity'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,script:celebrity1,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>
  <entity name="article" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'article'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,script:article1,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>
  <entity name="event" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'event'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>
  <entity name="film" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'film'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>
  <entity name="lieu" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'place'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>
  <entity name="citation" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'citation'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>
  <entity name="forum" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'forum'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>
 </document>
</dataConfig>
