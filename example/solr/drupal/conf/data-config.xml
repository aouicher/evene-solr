<?xml version="1.0" encoding="UTF-8" ?>
<dataConfig>
    <script><![CDATA[

                function first(obj) {
                    return obj[Object.keys(obj)[0]];
                }

                function article1(row) {
                    if(row.get('field_article_image') !== null)
                    {
                        var field_article_image = JSON.parse(row.get('field_article_image'))

                        if(field_article_image !== null) {
                            for(var i in field_article_image) {

                                if(field_article_image[i] !== null)
                                {
                                    if(field_article_image[i].filename)
                                    {
                                        row.put('picture',field_article_image[i].filename);
                                    }
                                }
                            }
                        }
                    }

                    if(row.get('field_article_text') !== null)
                    {
                        var field_article_text = JSON.parse(row.get('field_article_text'))

                            for(var i in field_article_text) {

                                if(field_article_text[i] !== null)
                                {
                                    if(field_article_text[i].value !== null)
                                    {
                                        row.put('body',field_article_text[i].value);
                                    }
                                }
                            }
                    }

                    if(row.get('field_subtitle') !== null)
                    {
                        var field_subtitle = JSON.parse(row.get('field_subtitle'))

                        for(var i in field_subtitle) {
                            if(field_subtitle[i] !== null)
                            {
                                if(field_subtitle[i].value !== null)
                                {
                                    row.put('field_subtitle_final',field_subtitle[i].value);
                                }
                            }
                        }
                    }

                    if(row.get('taxonomy') !== null)
                    {
                        var taxo = JSON.parse(row.get('taxonomy'))

                        for(var i in taxo) {
                            if(taxo[i] !== null)
                            {
                                if(taxo[i].name !== null  && taxo[i].vid !== null)
                                {
                                    if(taxo[i].vid == 2)
                                    {
                                        row.put('taxonomy_names',taxo[i].name);
                                    }
                                }
                            }
                        }
                    }

                    return row;
                }

                function book1(row)
                {





                    if(row.get('field_fnac_url') !== null)
                    {
                        var fnac = JSON.parse(row.get('field_fnac_url'))

                        for(var i in fnac)
                        {
                            if(fnac[i] !== null)
                            {
                                if(fnac[i].url !== null)
                                {
                                    row.put('fnac_url',fnac[i].url);
                                }
                            }
                        }
                    }

                    if(row.get('field_publication_date') !== null)
                    {
                        var field_publication_date = JSON.parse(row.get('field_publication_date'))
                        for(var i in field_publication_date)
                        {
                            if(field_publication_date[i] !== null)
                            {
                                if(field_publication_date[i].value !== null)
                                {
                                    row.put('ds_book_publication_timestamp',new java.util.Date(field_publication_date[i].value * 1000));
                                }
                            }
                        }
                    }

                    if(row.get('field_content_celebrity') !== null)
                    {
                        var field_content_celebrity = JSON.parse(row.get('field_content_celebrity'))
                        for(var i in field_content_celebrity)
                        {
                            if(field_content_celebrity[i] !== null)
                            {
                                if(field_content_celebrity[i].nid !== null && field_content_celebrity[i].type !== null)
                                {
                                    if(field_content_celebrity[i].type == 50)
                                    {
                                        row.put('field_content_celebrity_nid',field_content_celebrity[i].nid);
                                    }
                                }
                            }
                        }
                    }


                    if(row.get('field_description') !== null)
                    {
                        if(row.get('field_description').get(0) !== null)
                        {
                            if(row.get('field_description').get(0).get('value') !== null)
                            {
                                row.put('body',row.get('field_description').get(0).get('value'));

                            }
                        }

                    }




                    if(row.get('field_subtitle') !== null)
                    {
                        if(row.get('field_subtitle').get(0) !== null)
                        {
                            if(row.get('field_subtitle').get(0).get('value') !== null)
                            {
                                row.put('field_subtitle_final',row.get('field_subtitle').get(0).get('value'));
                            }
                        }

                    }




                    if(row.get('field_image') !== null)
                    {
                        if(row.get('field_image').get(0) !== null)
                        {
                            if(row.get('field_image').get(0).get('filepath') !== null)
                            {
                                row.put('picture',row.get('field_image').get(0).get('filename'));
                            }
                        }

                    }
                    if(row.get('field_label') !== null)
                    {
                        if(row.get('field_label').get(0) !== null)
                        {
                            if(row.get('field_label').get(0).get('nid') !== null)
                            {
                                row.put('field_label_nid',row.get('field_label').get(0).get('nid'));
                            }
                        }

                    }
                 return row;
                }

                function celebrity1(row)        {

                    if(row.get('field_description') !== null)
                    {
                        if(row.get('field_description').get(0) !== null)
                        {
                            if(row.get('field_description').get(0).get('value') !== null)
                            {
                                row.put('ss_field_place_description',row.get('field_description').get(0).get('value'));
                            }
                            else
                            {
                                row.put('ss_field_place_description','');
                            }
                        }

                    }
                    else
                    {
                        row.put('ss_field_place_description','');
                    }

                    if(row.get('field_info') !== null)
                    {
                        if(row.get('field_info').get(0) !== null)
                        {
                            if(row.get('field_info').get(0).get('value') !== null)
                            {
                                row.put('ss_celebrity_info',row.get('field_info').get(0).get('value'));
                            }
                            else
                            {
                                row.put('ss_celebrity_info','');
                            }
                        }

                    }
                    else
                    {
                        row.put('ss_celebrity_info','');
                    }

                    if(row.get('field_intro') !== null)
                    {
                        if(row.get('field_intro').get(0) !== null)
                        {
                            if(row.get('field_intro').get(0).get('value') !== null)
                            {
                                row.put('ss_field_place_intro',row.get('field_intro').get(0).get('value'));
                            }
                            else
                            {
                                row.put('ss_field_place_intro','');
                            }
                        }

                    }
                    else
                    {
                        row.put('ss_field_place_intro','');
                    }



                    if(row.get('field_site') !== null)
                    {
                        if(row.get('field_site').get(0) !== null)
                        {
                            if(row.get('field_site').get(0).get('url') !== null)
                            {
                                row.put('ss_field_place_site',row.get('field_site').get(0).get('url'));
                            }
                            else
                            {
                                row.put('ss_field_place_site','');
                            }
                        }

                    }
                    else
                    {
                        row.put('ss_field_place_site','');
                    }

                    row.put('body',row.get('ss_field_place_intro') + ' ' + row.get('ss_field_place_description') + ' ' + row.get('ss_field_place_site'));




                    if(row.get('field_image') !== null)
                    {
                        if(row.get('field_image').get(0) !== null)
                        {
                            if(row.get('field_image').get(0).get('filepath') !== null)
                            {
                                row.put('picture',row.get('field_image').get(0).get('filename'));
                            }
                        }

                    }
                    if(row.get('field_label') !== null)
                    {
                        if(row.get('field_label').get(0) !== null)
                        {
                            if(row.get('field_label').get(0).get('nid') !== null)
                            {
                                row.put('field_label_nid',row.get('field_label').get(0).get('nid'));
                            }
                        }

                    }

                    if(row.get('field_gender') !== null)
                    {
                        var gender = JSON.parse(row.get('field_gender'))

                        for(var i in gender)
                        {
                            if(gender[i] !== null)
                            {
                                if(gender[i].value !== null)
                                {
                                    row.put('gender_celebrity',gender[i].value);
                                }
                            }
                        }
                    }

                    if(row.get('field_date_death') !== null)
                    {
                        var date_death = JSON.parse(row.get('field_date_death'))

                        for(var i in date_death)
                        {
                            if(date_death[i] !== null)
                            {
                                if(date_death[i].value !== null && date_death[i].value !== "")
                                {
                                    var ddeath = null;
                                    var ddeathFinal = null;
                                    var d = date_death[i].value;

                                    ddeath = d.replace("T"," ");
                                    var format = "yyyy-MM-dd H:mm:ss";
                                    var formater = new java.text.SimpleDateFormat( format );

                                        try {
                                            ddeathFinal = formater.parse( ddeath );

                                            row.put('ds_celebrity_date_death',ddeathFinal);
                                        } catch (e) {
                                            print ('\r\n########### Erreur DATE DEATH (' + row.get('nid') + ')########### ' + date_death[i].value + ' => '+ ddeathFinal + '\r\n EURREUR : ' + e.toString() +' ############ FIN DATE ###########\r\n');
                                        }
                                }
                            }
                        }
                    }

                    if(row.get('field_place_death') !== null)
                    {
                        var place_death = JSON.parse(row.get('field_place_death'))

                        for(var i in place_death)
                        {
                            if(place_death[i] !== null)
                            {
                                if(place_death[i].value !== null)
                                {
                                     row.put('celebrity_place_death',place_death[i].value);
                                }
                            }
                        }
                    }

                    if(row.get('field_place_birth') !== null)
                    {
                        var place_birth = JSON.parse(row.get('field_place_birth'))

                        for(var i in place_birth)
                        {
                            if(place_birth[i] !== null)
                            {
                                if(place_birth[i].value !== null)
                                {
                                     row.put('celebrity_place_birth',place_birth[i].value);
                                }
                            }
                        }
                    }



                    if(row.get('field_date_birth') !== null)
                    {
                        var date_birth = JSON.parse(row.get('field_date_birth'))

                        for(var i in date_birth)
                        {

                            if(date_birth[i] !== null)
                            {
                                if(date_birth[i].value !== null  && date_birth[i].value !== "")
                                {
                                    var dbirth = null;
                                    var dbirthFinal = null;
                                    var db = date_birth[i].value;

                                    dbirth = db.replace("T"," ");
                                    var format = "yyyy-MM-dd H:mm:ss";
                                    var formater = new java.text.SimpleDateFormat( format );

                                    try {
                                        dbirthFinal = formater.parse( dbirth );
                                        row.put('ds_celebrity_date_birth',dbirthFinal);
                                    } catch (e) {
                                        print ('\r\n########### Erreur DATE BIRTH (' + row.get('nid') + ')########### ' + date_birth[i].value + ' => '+ dbirthFinal + '\r\n EURREUR : ' + e.toString() +' ############ FIN DATE ###########\r\n');
                                    }

                                }
                            }
                        }
                    }

                 return row;
                }

                function book2(row)
                {
                    if(row.get('title') !== null)
                    {
                        row.put('ss_book_label',row.get('title'));
                    }
                    return row;
                }

                function book3(row)
                {


                    if(row.get('title') !== null)
                    {
                        row.put('book_author_content_celebrity',row.get('title'));

                    }
                    if(row.get('path') !== null)
                    {
                        row.put('book_author_content_celebrity_path',row.get('path'));
                    }
                    return row;

                }
                function general(row)
                {

                    if(row.get('path') !== null)
                    {
                        //row.put('path_mask',evene_site_mask_url(EVENE_DOMAIN + row.get('path')));
                    }

                    if(row.get('taxonomy') !== null)
                    {
                        var taxo = JSON.parse(row.get('taxonomy'))

                        for(var i in taxo) {
                            if(taxo[i] !== null)
                            {
                                if(taxo[i].name !== null  && taxo[i].vid !== null)
                                {
                                    if(taxo[i].vid == 2)
                                    {
                                        row.put('taxonomy_names',taxo[i].name);
                                    }
                                }
                            }
                        }
                    }
                     return row;
                }

                function taxoPath(row)
                {
                    if(row.get('path') !== null)
                    {
                        row.put('taxonomy_path',row.get('path'));
                    }
                    return row;
                }

                function citation(row)
                {
                    if(row.get('field_citation_source') !== null)
                    {
                        var cita_source = JSON.parse(row.get('field_citation_source'))

                        for(var i in cita_source)
                        {
                            if(cita_source[i] !== null)
                            {
                                if(cita_source[i].value !== null)
                                {
                                    row.put('ss_field_citation_book',cita_source[i].value);
                                }
                            }
                        }
                    }

                    if(row.get('title') !== null)
                    {
                        row.put('body',row.get('title'));
                    }

                    if(row.get('field_citation_celebrity') !== null)
                    {
                        var cita_celebrity = JSON.parse(row.get('field_citation_celebrity'))
                        for(var i in cita_celebrity)
                        {
                            if(cita_celebrity[i] !== null)
                            {
                                if(cita_celebrity[i].nid !== null)
                                {
                                    row.put('field_citation_celebrity_nid',cita_celebrity[i].nid);
                                }
                            }
                        }
                    }

                    if(row.get('field_citation_keywords') !== null)
                    {
                        var cita_keywords = JSON.parse(row.get('field_citation_keywords'))

                        for(var i in cita_keywords)
                        {
                            if(cita_keywords[i] !== null)
                            {
                                if(cita_keywords[i].value !== null)
                                {
                                    row.put('ss_field_citation_keywords',cita_keywords[i].value);
                                }
                            }
                        }
                    }

                    return row;
                }

                function citation_auteur(row)
                {
                    if(row.get('title') !== null)
                    {
                        row.put('ss_field_citation_celebrity',row.get('title'));
                    }

                    if(row.get('path') !== null)
                    {
                        row.put('ss_field_citation_celebrity_path',row.get('path'));
                    }
                    return row;
                }

                function evenement(row)
                {

                    if(row.get('field_event_dates') !== null)
                    {
                        var event_dates = JSON.parse(row.get('field_event_dates'));
                        for(var i in event_dates)
                        {
                            if(event_dates[i] !== null)
                            {
                                if(event_dates[i].value !== null)
                                {
                                    row.put('ds_event_date_start',event_dates[i].value);
                                }

                                if(event_dates[i].value2 !== null)
                                {
                                    row.put('ds_event_date_end',event_dates[i].value2);
                                }
                            }
                        }
                    }


                    if(row.get('field_event_session') !== null)
                    {
                        var event_sessions = JSON.parse(row.get('field_event_session'));
                        var arr = new java.util.ArrayList();
                        for(var i in event_sessions)
                        {
                            if(event_sessions[i] !== null)
                            {
                                if(event_sessions[i].nid !== null)
                                {
                                    arr.add(event_sessions[i].nid);
                                    print('\r\nScript EVENT('+event_sessions[i].nid+')########');
                                }
                            }
                        }
                        row.put('event_session_nid',arr);

                    }
                    return row;
                }

                function evenement_session(row)
                {
                    print('\r\nScript SESSION ######## +row');
                    if(row.get('field_price') !== null)
                    {
                        var session_price = JSON.parse(row.get('field_price'));
                        for(var i in session_price)
                        {
                            if(session_price[i] !== null)
                            {
                                if(session_price[i].value !== null)
                                {
                                    var price = session_price[i].value;
                                    price = parseFloat(price);
                                    row.put('sess_event_price',price);
                                }
                            }
                        }
                    }

                    if(row.get('field_session_event') !== null)
                    {
                        var field_session_event = JSON.parse(row.get('field_session_event'));
                        for(var i in field_session_event)
                        {
                            if(field_session_event[i] !== null)
                            {
                                if(field_session_event[i].nid !== null)
                                {
                                    row.put('sess_field_session_event',field_session_event[i].nid);
                                }
                            }
                        }
                    }


                    if(row.get('field_session_place') !== null)
                    {
                        var session_place = JSON.parse(row.get('field_session_place'));

                        for(var i in session_place)
                        {
                            if(session_place[i] !== null)
                            {
                                if(session_place[i].nid !== null)
                                {
                                   row.put('session_place_nid',session_place[i].nid);
                                }
                            }
                        }
                    }

                    if(row.get('field_session_date') !== null)
                    {
                        var session_date = JSON.parse(row.get('field_session_date'));
                        for(var i in session_price)
                        {
                            if(session_date[i] !== null)
                            {
                                if(session_date[i].value !== null)
                                {
                                    row.put('sess_ds_date',session_date[i].value);
                                }
                            }
                        }
                    }
                    return row;
                }

                function evenement_session_place(row)
                {
                    print('\r\nScript PLACE ########');
                    if(row.get('field_adress') !== null)
                    {
                        var place_adress = JSON.parse(row.get('field_adress'));
                        for(var i in place_adress)
                        {
                            if(place_adress[i] !== null)
                            {
                                if(place_adress[i].value !== null)
                                {
                                    row.put('sess_ss_event_adress',place_adress[i].value);
                                }
                            }
                        }
                    }

                    if(row.get('field_geo') !== null)
                    {
                        var place_geo = JSON.parse(row.get('field_geo'));
                        for(var i in place_geo)
                        {
                            if(place_geo[i] !== null)
                            {
                                if(place_geo[i].value !== null)
                                {
                                    row.put('sess_ss_event_geo',place_geo[i].value);
                                }
                            }
                        }
                    }

                    if(row.get('field_place_ville') !== null)
                    {
                        var place_ville = JSON.parse(row.get('field_place_ville'));
                        for(var i in place_ville)
                        {
                            if(place_ville[i] !== null)
                            {
                                if(place_ville[i].value !== null)
                                {
                                    row.put('sess_ss_event_ville',place_ville[i].value);
                                }
                            }
                        }
                    }

                    if(row.get('field_zip_code') !== null)
                    {
                        var place_cp = JSON.parse(row.get('field_zip_code'));
                        for(var i in place_cp)
                        {
                            if(place_cp[i] !== null)
                            {
                                if(place_cp[i].value !== null)
                                {
                                    row.put('sess_ss_event_cp',place_cp[i].value);
                                }
                            }
                        }
                    }

                    return row;
                }

                function evenement_session_node(row)
                {

                    if(row.get('title') !== null)
                    {
                        row.put('title_event',row.get('title'));
                    }
                    return row;
                }


        ]]></script>
<dataSource name="EveneMongo" type="MongoDataSource" database="evene" host="127.0.0.1" port="27027"/>
 <document name="node">
  <entity name="livre" processor="MongoEntityProcessor"
   query="{'status':1, 'type':'book'}"
   collection="node"
   datasource="EveneMongo"
   transformer="script:general,script:book1,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" stripHTML="true" />
      <entity name="livre_label"
              processor="MongoEntityProcessor"
              onError="continue"
              query="{'nid': ${livre.field_label_nid} }"

              collection="node"
              datasource="EveneMongo"
              transformer="script:book2">
          <field column="body" name="body" stripHTML="true" />

      </entity>
      <entity name="livre_auteur"
              processor="MongoEntityProcessor"
              onError="continue"
              query="{'nid': ${livre.field_content_celebrity_nid} }"
              collection="node"
              datasource="EveneMongo"
              transformer="script:book3">

      </entity>
      <entity name="livre_categorie"
              processor="MongoEntityProcessor"
              onError="continue"
              query="{'type': 'listing', 'title':'${livre.taxonomy_names}'}.limit(1)"
              collection="node"
              datasource="EveneMongo"
              transformer="script:taxoPath">

      </entity>
  </entity>
  <entity name="celebrite" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'celebrity'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,script:celebrity1,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>

  <entity name="article" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'article'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,script:article1,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>

  <entity name="evenement" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'event'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,HTMLStripTransformer,script:evenement">
      <entity name="evenement_session" processor="MongoEntityProcessor"
              onError="continue"
              query="{'nid':${evenement.event_session_nid}}"
              collection="node"
              datasource="EveneMongo"
              transformer="script:evenement_session">
          <entity name="evenement_session_place" processor="MongoEntityProcessor"
                  onError="continue"
                  query="{'nid':${evenement_session.session_place_nid}}"
                  collection="node"
                  datasource="EveneMongo"
                  transformer="script:evenement_session_place">
          </entity>
      </entity>
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>

  <entity name="film" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'film'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:evenement,script:general,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />

  </entity>
  <entity name="sess" processor="MongoEntityProcessor"
             onError="continue"
             query="{'type':'session'}"
             collection="node"
             datasource="EveneMongo"
             transformer="script:evenement_session">

      <entity name="evenement_session_node" processor="MongoEntityProcessor"
              onError="continue"
              query="{'nid':${sess.sess_field_session_event}}"
              collection="node"
              datasource="EveneMongo"
              transformer="script:evenement_session_node">
      </entity>
      <entity name="evenement_session_place" processor="MongoEntityProcessor"
                 onError="continue"
                 query="{'nid':${sess.session_place_nid}}"
                 collection="node"
                 datasource="EveneMongo"
                 transformer="script:evenement_session_place">
      </entity>

      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>

  <entity name="lieu" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'place'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>
  <entity name="citation" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'citation'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,HTMLStripTransformer, script:citation">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
      <entity name="citation_auteur"
              processor="MongoEntityProcessor"
              onError="continue"
              query="{'nid': ${citation.field_citation_celebrity_nid} }"
              collection="node"
              datasource="EveneMongo"
              transformer="script:citation_auteur">

      </entity>
  </entity>
  <entity name="forum" processor="MongoEntityProcessor"
          query="{'status':1, 'type':'forum'}"
          collection="node"
          datasource="EveneMongo"
          transformer="script:general,HTMLStripTransformer">
      <field column="_id" name="_id" mongoField="nid" />
      <field column="body" name="body" stripHTML="true" />
  </entity>
 </document>
</dataConfig>
